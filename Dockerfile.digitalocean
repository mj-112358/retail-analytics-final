# DIGITALOCEAN OPTIMIZED DOCKERFILE
# Production-ready retail analytics system for DigitalOcean App Platform
# Optimized build process with reduced layers and faster deployment

FROM python:3.11-slim-bullseye

# Set environment variables
ENV PYTHONUNBUFFERED=1
ENV PYTHONDONTWRITEBYTECODE=1
ENV DEBIAN_FRONTEND=noninteractive
ENV QT_QPA_PLATFORM=offscreen
ENV DISPLAY=:99

# Create app directory
WORKDIR /app

# Install system dependencies in a single layer with cleanup
RUN apt-get update && apt-get install -y --no-install-recommends \
    # Build essentials
    build-essential \
    gcc \
    g++ \
    # OpenCV dependencies
    libglib2.0-0 \
    libsm6 \
    libxext6 \
    libxrender-dev \
    libgomp1 \
    libgtk-3-0 \
    # Video processing
    libavcodec58 \
    libavformat58 \
    libswscale5 \
    # Network tools
    curl \
    wget \
    # Clean up in same layer
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean \
    && apt-get autoremove -y

# Create requirements file for DigitalOcean deployment
COPY requirements.digitalocean.txt /app/requirements.txt

# Install Python dependencies with optimizations
RUN pip install --no-cache-dir --upgrade pip==23.3.1 && \
    pip install --no-cache-dir --find-links https://download.pytorch.org/whl/cpu \
    -r requirements.txt && \
    # Clear pip cache
    pip cache purge

# Download YOLO weights efficiently
RUN python -c "
import os
import urllib.request
try:
    print('Downloading YOLO weights...')
    urllib.request.urlretrieve(
        'https://github.com/ultralytics/assets/releases/download/v8.0.0/yolov8n.pt', 
        '/app/yolov8n.pt'
    )
    print('YOLO weights downloaded successfully')
    # Verify file size
    size = os.path.getsize('/app/yolov8n.pt')
    print(f'Downloaded file size: {size} bytes')
    if size < 1000000:  # Less than 1MB indicates download failure
        raise Exception('Download failed - file too small')
except Exception as e:
    print(f'YOLO download failed: {e}')
    print('Will download on first use instead')
"

# Copy application files (optimize Docker layer caching)
COPY main_digitalocean.py /app/
COPY database/ /app/database/
COPY rtsp_processor.py /app/
COPY demo_rtsp_processor.py /app/
COPY rtsp_tester.py /app/

# Create necessary directories and set permissions
RUN mkdir -p /app/logs /app/temp && \
    chmod -R 755 /app

# Health check for DigitalOcean
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
    CMD curl -f http://localhost:${PORT:-8080}/health || exit 1

# Expose port (DigitalOcean will set PORT env var)
EXPOSE 8080

# Optimized startup command
CMD ["sh", "-c", "python main_digitalocean.py --port ${PORT:-8080} --host 0.0.0.0"]